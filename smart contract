// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SubscriptionService {

    struct Subscription {
        address owner;
        string title;
        string details;
        uint256 expirationDate;
        string otherDetails;
    }

    Subscription[] public subscriptions;
    mapping(address => uint256[]) public userSubscriptions;

    event SubscriptionAdded(address indexed owner, uint256 indexed subscriptionId, string title);
    event SubscriptionTransferred(uint256 indexed subscriptionId, address indexed from, address indexed to);

    // Add a new subscription
    function addSubscription(string memory title, string memory details, uint256 expirationDate, string memory otherDetails) public {
        Subscription memory newSubscription = Subscription({
            owner: msg.sender,
            title: title,
            details: details,
            expirationDate: expirationDate,
            otherDetails: otherDetails
        });

        subscriptions.push(newSubscription);
        uint256 subscriptionId = subscriptions.length - 1;
        userSubscriptions[msg.sender].push(subscriptionId);

        emit SubscriptionAdded(msg.sender, subscriptionId, title);
    }

    // Get subscription details by ID
    function getSubscription(uint256 subscriptionId) public view returns (address, string memory, string memory, uint256, string memory) {
        Subscription memory subscription = subscriptions[subscriptionId];
        return (subscription.owner, subscription.title, subscription.details, subscription.expirationDate, subscription.otherDetails);
    }

    // Transfer subscription ownership
    function transferSubscription(uint256 subscriptionId, address newOwner) public {
        require(msg.sender == subscriptions[subscriptionId].owner, "Only the owner can transfer the subscription.");
        require(newOwner != address(0), "Invalid address.");

        subscriptions[subscriptionId].owner = newOwner;

        // Remove from old owner's list
        uint256[] storage ownerSubscriptions = userSubscriptions[msg.sender];
        for (uint256 i = 0; i < ownerSubscriptions.length; i++) {
            if (ownerSubscriptions[i] == subscriptionId) {
                ownerSubscriptions[i] = ownerSubscriptions[ownerSubscriptions.length - 1];
                ownerSubscriptions.pop();
                break;
            }
        }

        // Add to new owner's list
        userSubscriptions[newOwner].push(subscriptionId);

        emit SubscriptionTransferred(subscriptionId, msg.sender, newOwner);
    }

    // Get user subscriptions
    function getUserSubscriptions(address user) public view returns (uint256[] memory) {
        return userSubscriptions[user];
    }
}
